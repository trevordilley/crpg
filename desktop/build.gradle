apply plugin: "kotlin"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.ancient.game.crpg.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

import org.gradle.internal.os.OperatingSystem

//task run(dependsOn: classes, type: JavaExec) {
//    mainClass = project.mainClassName
//    classpath = sourceSets.main.runtimeClasspath
//    standardInput = System.in
//    workingDir = project.assetsDir
//    ignoreExitValue = true
//}

tasks.register('run', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    println("Setting codecache")
    jvmArgs += "-XX:ReservedCodeCacheSize=2048m"
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}


tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}



//task debug(dependsOn: classes, type: JavaExec) {
//    mainClass = project.mainClassName
//    classpath = sourceSets.main.runtimeClasspath
//    standardInput = System.in
//    workingDir = project.assetsDir
//    ignoreExitValue = true
//    debug = true
//}


tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

//task dist(type: Jar) {
//    from files(sourceSets.main.output.classesDirs)
//    from files(sourceSets.main.output.resourcesDir)
//    from {configurations.compile.collect {zipTree(it)}}
//    from files(project.extensions.getAs);
//
//    manifest {
//        attributes 'Main-Class': project.mainClassName
//    }
//}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
